# Generated by Django 5.2.6 on 2025-11-01 23:14

import cloudinary.models
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='AdminWallet',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('currency', models.CharField(choices=[('BTC', 'Bitcoin (BTC)'), ('ETH', 'Ethereum (ETH)'), ('SOL', 'Solana (SOL)'), ('USDT ERC20', 'USDT (ERC20)'), ('USDT TRC20', 'USDT (TRC20)'), ('BNB', 'Binance Coin (BNB)'), ('TRX', 'Tron (TRX)'), ('USDC', 'USDC (BASE)')], max_length=100, unique=True)),
                ('amount', models.DecimalField(decimal_places=6, default=10.0, max_digits=20, verbose_name='Amount per unit')),
                ('wallet_address', models.CharField(max_length=255)),
                ('qr_code', cloudinary.models.CloudinaryField(blank=True, help_text='Optional QR code image for scanning', max_length=255, null=True, verbose_name='QRCode')),
                ('is_active', models.BooleanField(default=True, help_text='Enable/disable this payment option')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Admin Wallet',
                'verbose_name_plural': 'Admin Wallets',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Asset',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('category', models.CharField(choices=[('Forex', 'Forex'), ('Crypto', 'Crypto'), ('Commodities', 'Commodities'), ('Stocks', 'Stocks')], help_text='Choose the asset category. Example: Forex, Crypto, Commodities, Stocks', max_length=20)),
                ('symbol', models.CharField(help_text='Enter the trading symbol. Example: EURUSD, BTCUSD, XAUUSD', max_length=20, unique=True)),
                ('flag', cloudinary.models.CloudinaryField(blank=True, help_text='Upload the asset flag/logo image. Example: eurousd_nobg.png', max_length=255, null=True, verbose_name='Asset Flag')),
                ('change', models.FloatField(help_text='Enter the percentage change in price. Example: 0.02 for +0.02%')),
                ('bid', models.DecimalField(decimal_places=6, help_text='Enter the bid price (buy). Example: 1.18031', max_digits=20)),
                ('ask', models.DecimalField(decimal_places=6, help_text='Enter the ask price (sell). Example: 1.18051', max_digits=20)),
                ('low', models.DecimalField(decimal_places=6, help_text='Enter the lowest price for the period. Example: 1.17626', max_digits=20)),
                ('high', models.DecimalField(decimal_places=6, help_text='Enter the highest price for the period. Example: 1.18199', max_digits=20)),
                ('time', models.TimeField(help_text='Enter the timestamp of the price update. Example: 10:47:52')),
            ],
        ),
        migrations.CreateModel(
            name='News',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(help_text='Enter the news article title. Example: Tesla Stock Surges After Record Q4 Deliveries', max_length=255)),
                ('summary', models.TextField(help_text='Brief summary of the article (1-2 sentences)')),
                ('content', models.TextField(help_text='Full article content')),
                ('category', models.CharField(choices=[('Stocks', 'Stocks'), ('Technology', 'Technology'), ('Economy', 'Economy'), ('Cryptocurrency', 'Cryptocurrency'), ('Commodities', 'Commodities'), ('Forex', 'Forex')], help_text='Select the news category', max_length=50)),
                ('source', models.CharField(help_text='News source name. Example: Financial Times, Bloomberg', max_length=100)),
                ('author', models.CharField(help_text='Author name. Example: Sarah Johnson', max_length=100)),
                ('published_at', models.DateTimeField(help_text='Publication date and time')),
                ('image', cloudinary.models.CloudinaryField(blank=True, help_text='Upload news article image or company logo', max_length=255, null=True, verbose_name='News Image')),
                ('tags', models.JSONField(blank=True, default=list, help_text="Enter tags as a list. Example: ['Tesla', 'Electric Vehicles', 'Earnings']")),
                ('is_featured', models.BooleanField(default=False, help_text='Mark as featured article')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'News Article',
                'verbose_name_plural': 'News Articles',
                'ordering': ['-published_at'],
            },
        ),
        migrations.CreateModel(
            name='Trader',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=150)),
                ('username', models.CharField(help_text='Trader username. Example: @SERGE', max_length=100, unique=True)),
                ('country', models.CharField(max_length=100)),
                ('avatar', cloudinary.models.CloudinaryField(blank=True, help_text='Upload the trader image', max_length=255, null=True, verbose_name='Trader Image')),
                ('badge', models.CharField(choices=[('gold', 'Gold'), ('silver', 'Silver'), ('bronze', 'Bronze')], default='bronze', help_text='Trader badge level', max_length=20)),
                ('gain', models.DecimalField(decimal_places=2, help_text='This should be the gain he made from the trade e.g. 194.32', max_digits=10)),
                ('risk', models.PositiveSmallIntegerField(help_text='Risk score should be from 1 to 10.')),
                ('capital', models.CharField(help_text='Enter the amount in dollars e.g. 2000, 4000', max_length=50)),
                ('copiers', models.PositiveIntegerField(help_text='This should range from 1 to 300 or even more.')),
                ('avg_trade_time', models.CharField(help_text="This should be time basis like '1 week', '3 weeks', '2 months'", max_length=50)),
                ('trades', models.PositiveIntegerField(help_text='This should be an integer showing the number of trade this trader has taken.')),
                ('subscribers', models.PositiveIntegerField(default=0, help_text='Total number of subscribers')),
                ('current_positions', models.PositiveIntegerField(default=0, help_text='Number of current open positions')),
                ('min_account_threshold', models.DecimalField(decimal_places=2, default=0.0, help_text='Minimum account balance required to copy this trader', max_digits=12)),
                ('expert_rating', models.DecimalField(decimal_places=2, default=5.0, help_text='Expert rating out of 5.00', max_digits=3)),
                ('return_ytd', models.DecimalField(decimal_places=2, default=0.0, help_text='Return Year To Date percentage', max_digits=10)),
                ('return_2y', models.DecimalField(decimal_places=2, default=0.0, help_text='Return over 2 years percentage', max_digits=10)),
                ('avg_score_7d', models.DecimalField(decimal_places=2, default=0.0, help_text='Average score over last 7 days', max_digits=10)),
                ('profitable_weeks', models.DecimalField(decimal_places=2, default=0.0, help_text='Percentage of profitable weeks', max_digits=5)),
                ('total_trades_12m', models.PositiveIntegerField(default=0, help_text='Total trades in past 12 months')),
                ('avg_profit_percent', models.DecimalField(decimal_places=2, default=0.0, help_text='Average profit percentage per trade', max_digits=10)),
                ('avg_loss_percent', models.DecimalField(decimal_places=2, default=0.0, help_text='Average loss percentage per trade', max_digits=10)),
                ('performance_data', models.JSONField(blank=True, default=list, help_text='Monthly performance data as list of {month, value}')),
                ('monthly_performance', models.JSONField(blank=True, default=list, help_text='Monthly performance percentages as list of {month, percentage}')),
                ('frequently_traded', models.JSONField(blank=True, default=list, help_text='List of frequently traded assets')),
                ('is_active', models.BooleanField(default=True, help_text='Is this trader available for copying?')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Trader',
                'verbose_name_plural': 'Copy Traders',
                'ordering': ['-gain', '-copiers'],
            },
        ),
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('id_type', models.CharField(blank=True, choices=[('passport', 'Passport'), ('driver_license', "Driver's License"), ('national_id', 'National ID'), ('voter_card', "Voter's Card")], help_text='Select the type of ID provided', max_length=50, null=True)),
                ('id_front', cloudinary.models.CloudinaryField(blank=True, help_text='Front side of ID document', max_length=255, null=True, verbose_name='image')),
                ('id_back', cloudinary.models.CloudinaryField(blank=True, help_text='Back side of ID document', max_length=255, null=True, verbose_name='image')),
                ('is_verified', models.BooleanField(default=False)),
                ('has_submitted_kyc', models.BooleanField(default=False)),
                ('email', models.EmailField(max_length=255, unique=True)),
                ('first_name', models.CharField(blank=True, max_length=50, null=True)),
                ('last_name', models.CharField(blank=True, max_length=50, null=True)),
                ('dob', models.DateField(blank=True, null=True)),
                ('address', models.CharField(blank=True, max_length=500, null=True)),
                ('postal_code', models.CharField(blank=True, max_length=500, null=True)),
                ('country', models.CharField(blank=True, max_length=100, null=True)),
                ('region', models.CharField(blank=True, max_length=100, null=True)),
                ('city', models.CharField(blank=True, max_length=100, null=True)),
                ('phone', models.CharField(blank=True, max_length=20, null=True)),
                ('currency', models.CharField(blank=True, max_length=10, null=True)),
                ('account_id', models.CharField(blank=True, max_length=10, null=True)),
                ('balance', models.DecimalField(decimal_places=2, default=0.0, help_text='This is a monetary value.', max_digits=20, verbose_name='Balance')),
                ('profit', models.DecimalField(decimal_places=2, default=0.0, help_text='This is a monetary value.', max_digits=20, verbose_name='Profit')),
                ('current_loyalty_status', models.CharField(choices=[('iron', 'Iron'), ('bronze', 'Bronze'), ('silver', 'Silver'), ('gold', 'Gold'), ('platinum', 'Platinum'), ('diamond', 'Diamond')], default='iron', help_text='Current loyalty tier', max_length=20)),
                ('next_loyalty_status', models.CharField(choices=[('iron', 'Iron'), ('bronze', 'Bronze'), ('silver', 'Silver'), ('gold', 'Gold'), ('platinum', 'Platinum'), ('diamond', 'Diamond')], default='bronze', help_text='Next loyalty tier', max_length=20)),
                ('is_active', models.BooleanField(default=True)),
                ('is_staff', models.BooleanField(default=False)),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'User',
                'verbose_name_plural': 'Users',
            },
        ),
        migrations.CreateModel(
            name='PaymentMethod',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('method_type', models.CharField(choices=[('ETH', 'Ethereum'), ('BTC', 'Bitcoin'), ('SOL', 'Solana'), ('USDT_ERC20', 'USDT (ERC20)'), ('USDT_TRC20', 'USDT (TRC20)'), ('BANK', 'Bank Transfer'), ('CASHAPP', 'Cash App'), ('PAYPAL', 'PayPal')], max_length=20)),
                ('address', models.CharField(blank=True, max_length=255, null=True)),
                ('bank_name', models.CharField(blank=True, max_length=100, null=True)),
                ('bank_account_number', models.CharField(blank=True, max_length=50, null=True)),
                ('cashapp_id', models.CharField(blank=True, max_length=100, null=True)),
                ('paypal_email', models.EmailField(blank=True, max_length=254, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='payment_methods', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Portfolio',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('market', models.CharField(help_text='Market/Asset name (e.g., BTC/USD)', max_length=100)),
                ('direction', models.CharField(choices=[('LONG', 'Long'), ('SHORT', 'Short')], max_length=10)),
                ('invested', models.DecimalField(decimal_places=2, help_text='Amount invested', max_digits=20)),
                ('profit_loss', models.DecimalField(decimal_places=2, help_text='Profit/Loss percentage', max_digits=10)),
                ('value', models.DecimalField(decimal_places=2, help_text='Current value', max_digits=20)),
                ('opened_at', models.DateTimeField(auto_now_add=True)),
                ('is_active', models.BooleanField(default=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='portfolios', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name_plural': "User's Portfolio",
                'ordering': ['-opened_at'],
            },
        ),
        migrations.CreateModel(
            name='Stock',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('symbol', models.CharField(choices=[('AAPL', 'Apple Inc. (AAPL)'), ('MSFT', 'Microsoft Corporation (MSFT)'), ('GOOGL', 'Alphabet Inc. (GOOGL)'), ('GOOG', 'Alphabet Inc. Class C (GOOG)'), ('AMZN', 'Amazon.com Inc. (AMZN)'), ('META', 'Meta Platforms Inc. (META)'), ('TSLA', 'Tesla Inc. (TSLA)'), ('NVDA', 'NVIDIA Corporation (NVDA)'), ('AMD', 'Advanced Micro Devices (AMD)'), ('INTC', 'Intel Corporation (INTC)'), ('NFLX', 'Netflix Inc. (NFLX)'), ('DIS', 'Walt Disney Company (DIS)'), ('SPOT', 'Spotify Technology (SPOT)'), ('ROKU', 'Roku Inc. (ROKU)'), ('V', 'Visa Inc. (V)'), ('MA', 'Mastercard Inc. (MA)'), ('PYPL', 'PayPal Holdings (PYPL)'), ('SQ', 'Block Inc. (SQ)'), ('COIN', 'Coinbase Global (COIN)'), ('SOFI', 'SoFi Technologies (SOFI)'), ('AFRM', 'Affirm Holdings (AFRM)'), ('MARA', 'Marathon Digital Holdings (MARA)'), ('RIOT', 'Riot Platforms Inc. (RIOT)'), ('CLSK', 'CleanSpark Inc. (CLSK)'), ('MSTR', 'MicroStrategy Inc. (MSTR)'), ('SHOP', 'Shopify Inc. (SHOP)'), ('ABNB', 'Airbnb Inc. (ABNB)'), ('UBER', 'Uber Technologies (UBER)'), ('DASH', 'DoorDash Inc. (DASH)'), ('AVGO', 'Broadcom Inc. (AVGO)'), ('QCOM', 'QUALCOMM Inc. (QCOM)'), ('MU', 'Micron Technology (MU)'), ('ASML', 'ASML Holding (ASML)'), ('CRM', 'Salesforce Inc. (CRM)'), ('ORCL', 'Oracle Corporation (ORCL)'), ('ADBE', 'Adobe Inc. (ADBE)'), ('NOW', 'ServiceNow Inc. (NOW)'), ('SNOW', 'Snowflake Inc. (SNOW)'), ('CRWD', 'CrowdStrike Holdings (CRWD)'), ('ZS', 'Zscaler Inc. (ZS)'), ('ENPH', 'Enphase Energy (ENPH)'), ('SEDG', 'SolarEdge Technologies (SEDG)'), ('RUN', 'Sunrun Inc. (RUN)'), ('SNAP', 'Snap Inc. (SNAP)'), ('PINS', 'Pinterest Inc. (PINS)'), ('TWLO', 'Twilio Inc. (TWLO)'), ('BMR', 'Beamr Imaging Ltd. (BMR)'), ('ZM', 'Zoom Video Communications (ZM)'), ('DOCU', 'DocuSign Inc. (DOCU)')], help_text='Select stock symbol from the dropdown', max_length=10, unique=True)),
                ('name', models.CharField(help_text='Full company name. Example: Apple Inc.', max_length=200)),
                ('logo_url', models.URLField(blank=True, help_text='Company logo URL. Example: https://logo.clearbit.com/apple.com', max_length=500, null=True)),
                ('price', models.DecimalField(decimal_places=2, help_text='Current stock price. Example: 225.91', max_digits=12)),
                ('change', models.DecimalField(decimal_places=2, help_text='Price change amount. Example: 12.15 (can be negative)', max_digits=12)),
                ('change_percent', models.DecimalField(decimal_places=2, help_text='Price change percentage. Example: 5.68 (can be negative)', max_digits=8)),
                ('volume', models.BigIntegerField(default=0, help_text='Trading volume')),
                ('market_cap', models.BigIntegerField(default=0, help_text='Market capitalization in dollars')),
                ('sector', models.CharField(blank=True, help_text='Company sector. Example: Technology, Finance, Healthcare', max_length=100, null=True)),
                ('is_active', models.BooleanField(default=True, help_text='Is this stock actively traded/displayed?')),
                ('is_featured', models.BooleanField(default=False, help_text='Featured stock on homepage?')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Stock',
                'verbose_name_plural': 'Stocks',
                'ordering': ['-is_featured', 'symbol'],
                'indexes': [models.Index(fields=['symbol'], name='app_stock_symbol_01a289_idx'), models.Index(fields=['is_active', 'is_featured'], name='app_stock_is_acti_ba077c_idx')],
            },
        ),
        migrations.CreateModel(
            name='Ticket',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('subject', models.CharField(blank=True, max_length=200)),
                ('category', models.CharField(blank=True, max_length=200)),
                ('description', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='tickets', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='TraderPortfolio',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('market', models.CharField(help_text='Market/Asset name. Example: AAPL, EURUSD, BTC', max_length=100)),
                ('direction', models.CharField(choices=[('LONG', 'Long'), ('SHORT', 'Short')], help_text='Trade direction: Long or Short', max_length=10)),
                ('invested', models.DecimalField(decimal_places=2, help_text='Amount invested in this position', max_digits=12)),
                ('profit_loss', models.DecimalField(decimal_places=2, help_text='Profit/Loss percentage', max_digits=10)),
                ('value', models.DecimalField(decimal_places=2, help_text='Current value of the position', max_digits=12)),
                ('opened_at', models.DateTimeField(auto_now_add=True, help_text='When this position was opened')),
                ('is_active', models.BooleanField(default=True, help_text='Is this position still open?')),
                ('trader', models.ForeignKey(help_text='The trader this portfolio belongs to', on_delete=django.db.models.deletion.CASCADE, related_name='portfolios', to='app.trader')),
            ],
            options={
                'verbose_name': 'Trader Portfolio Position',
                'verbose_name_plural': 'Trader Portfolio Positions',
                'ordering': ['-opened_at'],
            },
        ),
        migrations.CreateModel(
            name='Transaction',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('transaction_type', models.CharField(choices=[('deposit', 'Deposit'), ('withdrawal', 'Withdrawal')], max_length=20)),
                ('amount', models.DecimalField(decimal_places=2, max_digits=12, verbose_name='Total Amount')),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('completed', 'Completed'), ('failed', 'Failed'), ('cancelled', 'Cancelled')], default='pending', max_length=20)),
                ('reference', models.CharField(max_length=100, unique=True)),
                ('description', models.TextField(blank=True, null=True)),
                ('currency', models.CharField(max_length=100)),
                ('unit', models.DecimalField(decimal_places=2, default=10.0, max_digits=12, verbose_name='Unit of currency')),
                ('receipt', cloudinary.models.CloudinaryField(blank=True, help_text="Here's the receipt for the transaction.", max_length=255, null=True, verbose_name='receipt')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='transactions', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Transaction',
                'verbose_name_plural': 'Transactions',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Notification',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.CharField(choices=[('trade', 'Trade'), ('deposit', 'Deposit'), ('withdrawal', 'Withdrawal'), ('alert', 'Alert'), ('system', 'System'), ('news', 'News')], help_text='Type of notification', max_length=20)),
                ('title', models.CharField(help_text='Notification title', max_length=255)),
                ('message', models.TextField(help_text='Short notification message')),
                ('full_details', models.TextField(help_text='Full notification details/description')),
                ('priority', models.CharField(choices=[('low', 'Low'), ('medium', 'Medium'), ('high', 'High')], default='medium', help_text='Notification priority level', max_length=10)),
                ('metadata', models.JSONField(blank=True, default=dict, help_text='Additional metadata like amount, stock, status')),
                ('read', models.BooleanField(default=False, help_text='Whether the notification has been read')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='When the notification was created')),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.ForeignKey(help_text='The user this notification belongs to', on_delete=django.db.models.deletion.CASCADE, related_name='notifications', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Notification',
                'verbose_name_plural': 'Notifications',
                'ordering': ['-created_at'],
                'indexes': [models.Index(fields=['user', '-created_at'], name='app_notific_user_id_1ee635_idx'), models.Index(fields=['user', 'read'], name='app_notific_user_id_080ee0_idx'), models.Index(fields=['type'], name='app_notific_type_98bfa3_idx')],
            },
        ),
        migrations.CreateModel(
            name='UserStockPosition',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('shares', models.DecimalField(decimal_places=4, help_text='Number of shares owned', max_digits=12)),
                ('average_buy_price', models.DecimalField(decimal_places=2, help_text='Average purchase price per share', max_digits=12)),
                ('total_invested', models.DecimalField(decimal_places=2, help_text='Total amount invested', max_digits=15)),
                ('opened_at', models.DateTimeField(auto_now_add=True, help_text='When position was opened')),
                ('is_active', models.BooleanField(default=True, help_text='Is this position still open?')),
                ('closed_at', models.DateTimeField(blank=True, help_text='When position was closed', null=True)),
                ('stock', models.ForeignKey(help_text='Stock in this position', on_delete=django.db.models.deletion.CASCADE, related_name='positions', to='app.stock')),
                ('user', models.ForeignKey(help_text='User who owns this position', on_delete=django.db.models.deletion.CASCADE, related_name='stock_positions', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'User Stock Position',
                'verbose_name_plural': 'User Stock Positions',
                'ordering': ['-opened_at'],
                'indexes': [models.Index(fields=['user', 'is_active'], name='app_usersto_user_id_746c1e_idx'), models.Index(fields=['stock', 'is_active'], name='app_usersto_stock_i_7dcb76_idx')],
                'unique_together': {('user', 'stock', 'is_active')},
            },
        ),
    ]
